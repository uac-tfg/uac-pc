package de.mytfg.uac.wave.view;

import java.awt.BorderLayout;
import java.awt.Dimension;
import java.awt.FlowLayout;
import java.awt.GridLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.ComponentEvent;
import java.awt.event.ComponentListener;
import java.awt.event.ItemEvent;
import java.awt.event.ItemListener;

import javax.swing.DefaultComboBoxModel;
import javax.swing.JCheckBox;
import javax.swing.JComboBox;
import javax.swing.JComponent;
import javax.swing.JFormattedTextField;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.JSpinner;
import javax.swing.SpinnerNumberModel;
import javax.swing.event.ChangeEvent;
import javax.swing.event.ChangeListener;
import javax.swing.text.DefaultFormatter;

import de.mytfg.uac.wave.stream.InputWave;
import de.mytfg.uac.wave.view.WaveVisualizerPanel.LabelMethod;

public class WavePanel extends JPanel implements ChangeListener, ActionListener, ComponentListener {

  /**
   * Serial version UID needed by Serializable. Generated by eclipse.
   */
  private static final long serialVersionUID = 7700452874892977640L;

  private InputWave[] wave;

  private JComboBox comboBoxUnit;
  private JSpinner spinnerEvery;
  private JSpinner spinnerLength;
  private JSpinner spinnerStart;
  private WaveVisualizerPanel waveVisualizerPanel;


  /**
   * Create the panel.
   */
  public WavePanel(InputWave[] wave) {
    this.wave = wave;

    addComponentListener(this);

    setLayout(new BorderLayout(0, 20));

    JPanel visualPanel = new JPanel();
    add(visualPanel, BorderLayout.CENTER);
    visualPanel.setLayout(new BorderLayout(0, 0));

    waveVisualizerPanel = new WaveVisualizerPanel(wave);
    FlowLayout fl_waveVisualizerPanel = (FlowLayout) waveVisualizerPanel.getLayout();
    fl_waveVisualizerPanel.setVgap(0);
    fl_waveVisualizerPanel.setHgap(0);
    visualPanel.add(waveVisualizerPanel);

    JPanel settingsPanel = new JPanel();
    add(settingsPanel, BorderLayout.SOUTH);
    settingsPanel.setLayout(new GridLayout(3, 1, 0, 0));

    JPanel panelPos = new JPanel();
    settingsPanel.add(panelPos);

    JPanel panelLength = new JPanel();
    panelPos.add(panelLength);
    panelLength.setLayout(new BorderLayout(5, 0));

    JLabel lblLength = new JLabel("Length");
    panelLength.add(lblLength, BorderLayout.WEST);

    spinnerLength = new JSpinner();
    spinnerLength.setPreferredSize(new Dimension(86, 20));
    spinnerLength.setModel(new SpinnerNumberModel(new Integer(1000), new Integer(1), null,
        new Integer(10)));
    panelLength.add(spinnerLength, BorderLayout.CENTER);
    lblLength.setLabelFor(spinnerLength);
    {
      JComponent comp = spinnerLength.getEditor();
      JFormattedTextField field = (JFormattedTextField) comp.getComponent(0);
      DefaultFormatter formatter = (DefaultFormatter) field.getFormatter();
      formatter.setCommitsOnValidEdit(true);
      spinnerLength.addChangeListener(this);
    }

    JPanel panelStart = new JPanel();
    panelPos.add(panelStart);
    panelStart.setLayout(new BorderLayout(5, 0));

    JLabel lblStart = new JLabel("Start");
    panelStart.add(lblStart, BorderLayout.WEST);

    spinnerStart = new JSpinner();
    spinnerStart.setPreferredSize(new Dimension(86, 20));
    spinnerStart.setModel(new SpinnerNumberModel(new Long(0), new Long(0), null, new Long(10)));
    panelStart.add(spinnerStart, BorderLayout.CENTER);
    lblStart.setLabelFor(spinnerStart);
    {
      JComponent comp = spinnerStart.getEditor();
      JFormattedTextField field = (JFormattedTextField) comp.getComponent(0);
      DefaultFormatter formatter = (DefaultFormatter) field.getFormatter();
      formatter.setCommitsOnValidEdit(true);
      spinnerStart.addChangeListener(this);
    }

    JPanel panelLabel = new JPanel();
    settingsPanel.add(panelLabel);

    JLabel lblEvery = new JLabel("Label every");
    panelLabel.add(lblEvery);
    lblEvery.setLabelFor(spinnerEvery);

    spinnerEvery = new JSpinner();
    spinnerEvery.setPreferredSize(new Dimension(86, 20));
    spinnerEvery.setModel(new SpinnerNumberModel(new Integer(100), new Integer(1), null,
        new Integer(1)));
    panelLabel.add(spinnerEvery);
    {
      JComponent comp = spinnerEvery.getEditor();
      JFormattedTextField field = (JFormattedTextField) comp.getComponent(0);
      DefaultFormatter formatter = (DefaultFormatter) field.getFormatter();
      formatter.setCommitsOnValidEdit(true);
      spinnerEvery.addChangeListener(this);
    }

    comboBoxUnit = new JComboBox();
    comboBoxUnit.setModel(new DefaultComboBoxModel(LabelMethod.values()));
    panelLabel.add(comboBoxUnit);
    comboBoxUnit.addActionListener(this);

    JPanel panelWaves = new JPanel();
    settingsPanel.add(panelWaves);

    CheckBoxList wavesList = new CheckBoxList();
    JCheckBox[] checkBoxes = new JCheckBox[wave.length + 1];
    for (int i = 0; i < wave.length; i++) {
      JCheckBox box = new JCheckBox();
      box.setText(String.valueOf(i));
      checkBoxes[i] = box;
    }
    JCheckBox combinedBox = new JCheckBox();
    combinedBox.setText("combined");
    checkBoxes[checkBoxes.length - 1] = combinedBox;
    for (int i = 0; i < checkBoxes.length; i++) {
      JCheckBox box = checkBoxes[i];
      box.addItemListener(new ItemListener() {
        private int i;

        @Override
        public void itemStateChanged(ItemEvent e) {
          waveVisualizerPanel.setWaveDrawn(i, box.isSelected());
        }

        public ItemListener set(int i) {
          this.i = i;
          return this;
        }
      }.set(i));
      box.setSelected(true);
    }
    wavesList.setListData(checkBoxes);

    panelWaves.add(wavesList);
  }

  private void updateWaveVisualizerPanel() {
    // Pos
    Object o = spinnerStart.getValue();
    waveVisualizerPanel.setFrom((long) o);
    waveVisualizerPanel.setLength((int) spinnerLength.getValue());

    // Labeling
    LabelMethod method = (LabelMethod) comboBoxUnit.getSelectedItem();
    waveVisualizerPanel.setLabeling(method, (int) spinnerEvery.getValue());

    // dist
    waveVisualizerPanel.adjustSize();

    waveVisualizerPanel.repaint();
  }

  @Override
  public void stateChanged(ChangeEvent e) {
    updateWaveVisualizerPanel();
  }

  @Override
  public void actionPerformed(ActionEvent e) {
    updateWaveVisualizerPanel();
  }

  @Override
  public void componentResized(ComponentEvent e) {
    updateWaveVisualizerPanel();
  }

  @Override
  public void componentShown(ComponentEvent e) {
    updateWaveVisualizerPanel();
  }

  @Override
  public void componentHidden(ComponentEvent e) {}

  @Override
  public void componentMoved(ComponentEvent e) {}
}
